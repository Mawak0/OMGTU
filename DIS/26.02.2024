






def long_search(edges):

    def is_black_point(point, edges, used_points):
        for e in edges:
            if point == e[1]:
                if e[0] not in used_points:
                    return False
            if point == e[0]:
                if e[1] not in used_points:
                    return False
        return True

    points = set()
    for e in edges:
        points.add(e[0])
        points.add(e[1])
    points = list(points)
    parts = []
    current_part = []
    black_points = []
    while len(black_points) != len(points):
        if len(current_part) == 0:
            for p in points:
                if p not in black_points:
                    current_part.append(p)
                    break
        current_blackpoints = []
        current_index = 0
        while len(current_part) != len(current_blackpoints):
            for e in edges:
                if (e[0] == current_part[current_index]):
                    if e[1] not in current_part:
                        current_part.append(e[1])
                        current_index = len(current_part)-1

                if (e[1] == current_part[current_index]):
                    if e[0] not in current_part:
                        current_part.append(e[0])
                        current_index = len(current_part)-1

                if is_black_point(e[1], edges, current_part):
                    if e[1] not in black_points:
                        black_points.append(e[1])
                        current_blackpoints.append(e[1])
                    if e[1] not in current_part:
                        current_part.append(e[1])
                if is_black_point(e[0], edges, current_part):
                    if e[0] not in black_points:
                        black_points.append(e[0])
                        current_blackpoints.append(e[0])
                        if e[0] not in current_part:
                            current_part.append(e[0])
            if current_index != 0:
                current_index = current_index - 1
        parts.append(current_part)
        current_part = []
        current_blackpoints = []
    print(parts)






edges = []
edges_count = int(input("Введите кол-во ребер графа: "))
print("Вводите информацию о ребрах в следующем виде: ")
print("1 2")
print("где 1 и 2 - вершины, соединяемые ребром")
print("после каждой такой записи нажимайте enter")
for i in range(0, edges_count):
    edges.append([int(q) for q in input().split(" ")])

long_search(edges)
