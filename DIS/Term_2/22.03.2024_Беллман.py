def Show_weigth_matrix(weigth_matrix):
    print("--------------------")
    for line in weigth_matrix:
        print(line)
    print("--------------------")

def Show_work_matrix(work_matrix):
    for line in range(1, len(work_matrix)):
        print(work_matrix[line])

def get_point_inputs(weigth_matrix, point):
    point_inputs = []
    for p in range(0, len(points)+1):
        if weigth_matrix[p][point] != float("inf"):
            point_inputs.append(p)
    return point_inputs


def Bellman(weight_matrix, start):

    work_matrix = []
    for p in range(0, len(points) + 1):
        if p != start:
            work_matrix.append([float("inf")])
        else:
            work_matrix.append([0])

    stop = False
    k = 0


    while not stop:
        k += 1
        for la in range(1, len(points)+1):
            if la != start:
                min_lambda = float("inf")
                for j in range(1, len(points)+1): # get min lambda
                    if (min_lambda > work_matrix[j][k-1]+weight_matrix[j][la]):
                        min_lambda = work_matrix[j][k-1]+weight_matrix[j][la]
            else:
                min_lambda = 0
            work_matrix[la].append(min_lambda)
        if k == len(points)+1:
            stop = True
    not_ident = False
    for i in range(1, len(points)):
        if work_matrix[i][k] != work_matrix[i][k-1]:
            not_ident = True
    if not_ident:
        print("–í –≥—Ä–∞—Ñ–µ —Å–æ–¥–µ—Ä–∂–∏—Ç—Å—è –∫–æ–Ω—Ç—É—Ä –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–≥–æ –≤–µ—Å–∞")
    else:
        print("–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –æ—Ç –≤–µ—Ä—à–∏–Ω—ã "+str(start)+" –¥–æ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –≤–µ—Ä—à–∏–Ω")
        for i in range(1, len(points)+1):
            print("–¥–æ "+str(i)+" –≤–µ—Ä—à–∏–Ω—ã : "+str(work_matrix[i][-1]))
        back_ways = []
        for i in range(0, len(points)):
            back_ways.append([list(points)[i]])

        for s in range(1, len(points) + 1):
            search_depth = 0
            while (back_ways[s - 1][-1] != start) and (len(points) - 2 - search_depth != -1):
                ss = back_ways[s - 1][-1]
                inputs = get_point_inputs(weigth_matrix, ss)
                for r in inputs:
                    if (work_matrix[r][len(points) - 2 - search_depth] + weight_matrix[r][ss] == work_matrix[ss][
                        len(points) - 1 - search_depth]):
                        back_ways[s - 1].append(r)
                        break
                search_depth += 1
        print("–ü—É—Ç–∏ –æ—Ç –≤–µ—Ä—à–∏–Ω—ã " + str(start) + " –¥–æ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –≤–µ—Ä—à–∏–Ω:")
        for way in back_ways:
            path = ""
            for w in way[::-1]:
                path = path + " ü¢° " + str(w)
            print("–¥–æ –≤–µ—Ä—à–∏–Ω—ã " + str(way[0]) + " : " + path)


















edges = []
edges_count = int(input("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª-–≤–æ —Ä–µ–±–µ—Ä –≥—Ä–∞—Ñ–∞: "))
print("–í–≤–æ–¥–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–±—Ä–∞—Ö –≤ —Å–ª–µ–¥—É—é—â–µ–º –≤–∏–¥–µ: ")
print("1 2 3")
print("–≥–¥–µ 1 –∏ 2 - –≤–µ—Ä—à–∏–Ω—ã, —Å–æ–µ–¥–∏–Ω—è–µ–º—ã–µ —Ä–µ–±—Ä–æ–º")
print("3 - –≤–µ—Å —Ä–µ–±—Ä–∞")
print("–ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–π —Ç–∞–∫–æ–π –∑–∞–ø–∏—Å–∏ –Ω–∞–∂–∏–º–∞–π—Ç–µ enter")

for i in range(0, edges_count):
    edges.append([int(q) for q in input().split(" ")])

points = set()
for e in edges:
    points.add(e[0])
    points.add(e[1])

weigth_matrix = []


for p in range(0, len(points)+2):
    weigth_matrix.append([float('inf') for i in range(0, len(points)+2)])


for e in edges:
    weigth_matrix[e[0]][e[1]] = e[2]

start = int(input("–í–≤–µ–¥–∏—Ç–µ –Ω–∞—á–∞–ª—å–Ω—É—é —Ç–æ—á–∫—É: "))

Bellman(weigth_matrix, start)
