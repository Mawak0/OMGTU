/******************************************************************************

Welcome to GDB Online.
GDB online is an online compiler and debugger tool for C, C++, Python, Java, PHP, Ruby, Perl,
C#, OCaml, VB, Swift, Pascal, Fortran, Haskell, Objective-C, Assembly, HTML, CSS, JS, SQLite, Prolog.
Code, Compile, Run and Debug online from anywhere in world.

класс один
описывает аудиторный фонд института
характеристики аудитории:
кол во посадочных мест
оснащенность проектором
оснащенность компьютерами(кол-во)
корпус
этаж и номер на этаже

выборки
1)выбрать которые имеют кол во посадочных мест больше либо равно заданному
2) выбрать аудитории с наличием компьютеров в заданном кол-ве
3) ВЫБОРКА аудиторий с наличием компьютеров нв звдвнном этаже
4) ВЫБОРКА АУДИТОРИЙ в заданеном корпусе на заданном этаже с заданным кол-вом посадочных мест

требования:
реализован класс меню(еще один класс)
в котором необходимо реализовать вывод меню на экран
меню:
создание(базы аудиторного фонда)
дополнение(базы)
несколько пунктов по выборке
пункт по изменению данных для заданной аудитории
вывод всех данных
выход
*******************************************************************************/
using System;

class Classroom{
    int seats_count;
    bool projector;
    int computers_count;
    int building;
    string floor_and_number;
    public Classroom(int seats_count, bool projector, int computers_count, int building, int floor,  int number_in_floor){
        this.seats_count = seats_count;
        this.projector = projector;
        this.computers_count = computers_count;
        this.building = building;
        this.floor_and_number = Convert.ToString(floor)+"-"+Convert.ToString(number_in_floor);
    }
    public int Seats_count{
        get {return this.seats_count;}
        set {this.seats_count = value;}
    }
    public bool Projector{
        get {return this.projector;}
        set {this.projector = value;}
    }
    public int Computers_count{
        get {return this.computers_count;}
        set {this.computers_count = value;}
    }
    public int Building{
        get {return this.building;}
        set {this.building = value;}
    }
    public int Floor{
        get {return Convert.ToInt32(this.floor_and_number.Split("-")[0]);}
        set {this.floor_and_number = Convert.ToString(value)+"-"+Convert.ToString(this.Number_in_floor);}
    }
    public int Number_in_floor{
        get {return Convert.ToInt32(this.floor_and_number.Split("-")[1]);}
        set {this.floor_and_number = Convert.ToString(this.Floor)+"-"+Convert.ToString(value);}
    }
    
}

class Menu{
    
    public int Enter_number(){
        int number = -1;
        bool done = false;
        while (done != true){
            try{
                number = Convert.ToInt32(Console.ReadLine());
                if (number >= 0){
                done = true;}
                else {Console.WriteLine("Ввод некорректный, введите неотрицательное число: ");}
            }
            catch{
                Console.WriteLine("Ввод некорректный, введите неотрицательное число: ");
            }
        }
        return number;
    }
    
    public int Main_menu(){
        Console.Write("Меню: \n1)Создание базы аудиторного фонда\n2)Дополнение базы\n3)Выбрать аудитории, которые имеют кол-во посадочных мест большее либо равное заданному\n4)Выбрать аудитории с наличием компьютеров в заданном кол-ве\n5)Выбрать аудитории с наличием компьютеров на заданном этаже\n6)Выбрать аудитории в заданном корпусе, на заданном этаже, с заданным кол-вом посадочных мест\n7)Изменение данных для заданной аудитории\n8)Вывод всей информации\n9)Выход\n>");
        int choice = Enter_number();
        return choice;
    }
    public Classroom[] Base_create(){
        int length = 0;
        Console.Write("Введите количество создаваемых аудиторий: ");
        length = Enter_number();
        Classroom[] classrooms = new Classroom[length];
        for (int i = 0; i<length; i++){
            Console.WriteLine($"\nСоздание {i+1} аудитории");
            classrooms[i] = Classroom_create();
            
        }
        Console.WriteLine("Создание базы завершено");
        return classrooms;
    }
    public Classroom Classroom_create(){
            Console.Write("Количество посадочных мест: ");
            int seats_count = Enter_number();
            Console.Write("Наличие проектора (0 - отсутствует, 1 - имеется): ");
            int p = Enter_number();
            bool projector = false;
            bool p_done = false;
            while (p_done != true){
                if (p == 1) {projector = true; p_done = true;}
                else if (p == 0) {projector = false; p_done = true;}
                else {Console.WriteLine("Введите 0 или 1 (0 - проектор отсутствует, 1 - проектор имеется): "); p = Enter_number();}
            }
            Console.Write("Количество компьютеров: ");
            int computers_count = Enter_number();
            Console.Write("Корпус: ");
            int building = Enter_number();
            Console.Write("Этаж и номер на этаже (1-123):");
            bool done = false;
            string floor_and_number;
            int floor = -1;
            int number_in_floor = -1;
            while (done != true){
                try{
                    floor_and_number = Console.ReadLine();
                    if ((floor_and_number.Split("-")[0].Length > 1) || (floor_and_number.Split("-")[0] == "0")){
                        throw new Exception();
                    }
                    
                    floor = Convert.ToInt32(floor_and_number.Split("-")[0]);
                    number_in_floor = Convert.ToInt32(floor_and_number.Split("-")[1]);
                    if ((floor_and_number.Split("-")[1].Length > 2) || (floor_and_number.Split("-")[1] == "0") || (floor_and_number.Split("-")[1] == "00")){
                        throw new Exception();
                    }
                    done = true;
                }
                catch{
                    Console.WriteLine("Ввод некорректный, введите два числа в формате 1-12 ([1-9]-[1-99]) ");
                }
            }
            return new Classroom(seats_count, projector, computers_count, building, floor, number_in_floor);
    }
    
    public void Show_room_data(Classroom room, int base_number){
        string projector_word = "Нет";
        if (room.Projector == true) {projector_word = "Есть";}
        Console.WriteLine($"{room.Floor}-{room.Number_in_floor} (корпус {room.Building})\nМест: {room.Seats_count}\nПроектор: {projector_word}\nКол-во компьютеров: {room.Computers_count}\nНомер в базе: {base_number}\n\n");
    }
    
    public void Show_all_data(Classroom[] classrooms){
        for (int i = 0; i < classrooms.Length; i++){
            Classroom room = classrooms[i];
            Show_room_data(room, i);
        }
        Console.Write("Нажмите enter для продолжения...");
        Console.ReadLine();
    }
    public Classroom[] Update_room_data(Classroom[] classrooms){
        Console.Write("Номер аудитории в базе: ");
        int room_num = Enter_number();
        Console.WriteLine("Введите новую информацию");
        classrooms[room_num] = Classroom_create();
        Console.WriteLine("Информация обновлена");
        return classrooms;
        
    }
    
    public void Show_classrooms_with_seats_count(Classroom[] classrooms){
        Console.Write("Количество посадочных мест: ");
        int need_seats_count = Enter_number();
        int flag = 0;
        for (int i=0; i<classrooms.Length; i++){
            if (classrooms[i].Seats_count >= need_seats_count){
                flag = 1;
                Show_room_data(classrooms[i], i);
            }
        }
        if (flag == 0){Console.WriteLine("Таких аудиторий нет");}
        Console.Write("Нажмите enter для продолжения...");
        Console.ReadLine();
    }
    
    public void Show_classrooms_with_computers_count(Classroom[] classrooms){
        Console.Write("Количество компьютеров: ");
        int need_computers_count = Enter_number();
        int flag = 0;
        for (int i=0; i<classrooms.Length; i++){
            if (classrooms[i].Computers_count >= need_computers_count){
                flag = 1;
                Show_room_data(classrooms[i], i);
            }
        }
        if (flag == 0){Console.WriteLine("Таких аудиторий нет");}
        Console.Write("Нажмите enter для продолжения...");
        Console.ReadLine();
    }
    public void Show_classrooms_with_computers_on_floor(Classroom[] classrooms){
        Console.Write("Этаж: ");
        int need_floor = Enter_number();
        int flag = 0;
        for (int i=0; i<classrooms.Length; i++){
            if ((classrooms[i].Computers_count >= 0) && (classrooms[i].Floor == need_floor)){
                flag = 1;
                Show_room_data(classrooms[i], i);
            }
        }
        if (flag == 0){Console.WriteLine("Таких аудиторий нет");}
        Console.Write("Нажмите enter для продолжения...");
        Console.ReadLine();
    }
        
    public void Show_classrooms_with_seats_count_on_floor_on_building(Classroom[] classrooms){
        Console.Write("Количество посадочных мест: ");
        int need_seats_count = Enter_number();
        Console.Write("Корпус: ");
        int need_building = Enter_number();
        Console.Write("Этаж: ");
        int need_floor = Enter_number();
        int flag = 0;
        for (int i=0; i<classrooms.Length; i++){
            if ((classrooms[i].Seats_count >= need_seats_count) && (classrooms[i].Floor == need_floor) && (classrooms[i].Building == need_building)){
                flag = 1;
                Show_room_data(classrooms[i], i);
            }
        }
        if (flag == 0){Console.WriteLine("Таких аудиторий нет");}
        Console.Write("Нажмите enter для продолжения...");
        Console.ReadLine();
    }
}

class Program {
    static void Main() {
    int choice = 0;
    Classroom[] classrooms = new Classroom[0];
    while (choice != 9){
        Menu menu = new Menu();
        choice = menu.Main_menu();
        if (choice == 1){
            classrooms = menu.Base_create();
        }
        
        if (choice == 2){
            Array.Resize(ref classrooms, classrooms.Length+1);
            classrooms[classrooms.Length-1] = menu.Classroom_create();
        }
        
        if (choice == 3){
            menu.Show_classrooms_with_seats_count(classrooms);
        }
        
        if (choice == 4){
            menu.Show_classrooms_with_computers_count(classrooms);
        }
        
        if (choice == 5){
            menu.Show_classrooms_with_computers_on_floor(classrooms);
        }
        if (choice == 6){
            menu.Show_classrooms_with_seats_count_on_floor_on_building(classrooms);
        }
        if (choice == 7){
            classrooms = menu.Update_room_data(classrooms);
        }
            
        if (choice == 8){
            menu.Show_all_data(classrooms);
        }
        
    }
  }
}
