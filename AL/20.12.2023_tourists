/******************************************************************************

Welcome to GDB Online.
GDB online is an online compiler and debugger tool for C, C++, Python, Java, PHP, Ruby, Perl,
C#, OCaml, VB, Swift, Pascal, Fortran, Haskell, Objective-C, Assembly, HTML, CSS, JS, SQLite, Prolog.
Code, Compile, Run and Debug online from anywhere in world.

точка выхода туристской группы
и точка окончания пути
между точками определенное расстояние
между точками расположены пункты отдыха
необходимо определть какие пункты посетит группа и какое количество дней будет пройден путь от начала до конца
на вход 
длина пути
кол-во пунктов
расстояние от начала до каждого пункта
средняя скорость группы
время восхода(формат часы минуты)
впемя захода (формат часы минуты)

группа выходит с восходом солнца
остановка производлится в том пункте после которого туристы не успевают дойти до следующегно так-как солнце село

выход
какие пункты посетят туристы
ккакое кол во дней им необходимо для прохождения заданного расстояния
*******************************************************************************/
using System;
class HelloWorld{
    static bool CanReachPoint(double pos, double point_pos, double time, double suntime, double speed){
        double have_time = suntime - time;
        Console.WriteLine($"{pos} {point_pos}, {time}, {suntime}, {speed}, {have_time}");
        if (have_time < (point_pos-pos)/speed){
            return false;
        }
        return true;
    }
    
  static void Main() {
    Console.Write("Длина пути: ");
    double way_dist = Convert.ToDouble(Console.ReadLine());
    Console.Write("Количество пунктов: ");
    int points_count = Convert.ToInt32(Console.ReadLine());
    double[] dists_to_points = new double[points_count+1];
    for (int i = 0; i < points_count; i++){
        Console.Write($"Расстояние до пункта {i+1}: ");
        dists_to_points[i] = Convert.ToDouble(Console.ReadLine());
    }
    dists_to_points[dists_to_points.Length-1] = way_dist;
    Console.Write("Средняя скорость группы: ");
    double speed = Convert.ToDouble(Console.ReadLine());
    Console.Write("Время восхода (часы): ");
    double sunrise_hours = Convert.ToDouble(Console.ReadLine());
    Console.Write("Время восхода (минуты): ");
    double sunrise_min = Convert.ToDouble(Console.ReadLine());
    double sunrise_time = sunrise_hours+(sunrise_min / 60);
    Console.Write("Время захода (часы): ");
    double sunset_hours = Convert.ToDouble(Console.ReadLine());
    Console.Write("Время захода (минуты): ");
    double sunset_min = Convert.ToDouble(Console.ReadLine());
    double sunset_time = sunset_hours+(sunset_min / 60);
    double sun_time = sunset_time - sunrise_time;
    
    
    int[] relax_points = new int[0];
    double time_in_way = 0;
    double pos = 0;
    double time_in_way_today = 0;
    for (int p = 0; p < points_count+1; p++){
        if (CanReachPoint(pos, dists_to_points[p], time_in_way_today, sun_time, speed)){
            time_in_way_today  = time_in_way_today + ((dists_to_points[p]-pos)/speed);
            pos = dists_to_points[p];
        }
        else{
            Array.Resize(ref relax_points, relax_points.Length+1);
            relax_points[relax_points.Length-1] = p-1;
            time_in_way = time_in_way + 24;
            pos = dists_to_points[p-1];
            time_in_way_today = 0;
        }
    }
    time_in_way = time_in_way + (dists_to_points[dists_to_points.Length-1] - dists_to_points[dists_to_points.Length-2])/speed;
    Console.Write("Точки, посещенные туристами: ");
    for (int i =0 ; i < relax_points.Length; i++){
        Console.Write($", {relax_points[i]+1} ");
    }
    Console.WriteLine($"Количество дней в пути: {time_in_way / 24} дней ({time_in_way} часов)");
    
    
  }
}
